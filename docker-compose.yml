# Specifies the version of the Compose file format.
version: '3.8'

# Defines a common set of properties and configurations that are used by multiple services.
x-common:
  &common
  build:
    context: .
    dockerfile: Dockerfile
  user: "${AIRFLOW_UID}:0"
  env_file: 
    - .env
  # Maps volumes to the host machine's file system for storing DAGs, logs, plugins, and data.
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - /var/run/docker.sock:/var/run/docker.sock

# Defines dependencies between services.
x-depends-on:
  &depends-on
  depends_on:
    postgres:
      condition: service_healthy
    airflow-init:
      condition: service_completed_successfully

# Defines the various services that will be started.
services:
# Initializes the Airflow database and creates default user.
  airflow-init:
    <<: *common
    container_name: airflow-init
    entrypoint: /bin/bash
    # Creates directories for storing logs, DAGs, and plugins, and sets owner to AIRFLOW_UID.
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    networks:
      - my_network

  # Airflow webserver for accessing the UI and running tasks manually.
  webserver:
    <<: [*common, *depends-on]
    container_name: airflow-webserver
    command: webserver
    restart: always
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - my_network
# PostgreSQL database for storing Airflow metadata and connections.
  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - ./data:/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    env_file:
      - .env
    networks:
      - my_network
# Airflow scheduler for triggering tasks based on the DAG schedule.
  scheduler:
    <<: [*common, *depends-on]
    container_name: airflow-scheduler
    command: scheduler
    restart: on-failure
    networks:
      - my_network
    ports:
      - "8793:8793"
    # Modify this to increase / decrease memory and cpu usage
    deploy:
        resources:
          limits:
            cpus: '0.50'
            memory: '512M'
          reservations:
            cpus: '0.25'
            memory: '128M'
# Elasticsearch for storing and indexing Airflow logs and metadata.
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    container_name: my_elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - my_network
# Kibana for visualizing and analyzing Airflow logs and metadata stored in Elasticsearch.
  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.3
    container_name: my_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - my_network

volumes:
  postgres_data:

networks:
  my_network: